<?php

/**
 * @file
 * The Node access user reference module.
 */

/**
 * Implements hook_node_grants().
 */
function nodeaccess_userreference_node_grants($account, $op) {
  $grants = array();
  $grants['nodeaccess_userreference'][] = $account->uid;
  $grants['nodeaccess_userreference_author'][] = $account->uid;
  $grants['nodeaccess_userreference_all'][] = 1;
  return $grants;
}

/**
 * Implements hook_form-FORM-ID_alter().
 */
function nodeaccess_userreference_form_field_ui_field_edit_form_alter(&$form, $form_state) {
  if ($form['#field']['type'] == 'user_reference' && $form['#instance']['entity_type'] == 'node') {
    $data = nodeaccess_userreference_field_settings($form['#instance']['bundle'], $form['#field']['field_name']);
    $form['field']['settings']['nodeaccess_userreference'] = array(
      '#type' => 'fieldset',
      '#title' => t('Node access user reference'),
    );
    $form['field']['settings']['nodeaccess_userreference']['referenced'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Grants for referenced users'),
      '#default_value' => isset($data['referenced']) ? $data['referenced'] : array('view'),
      '#options' => array(
        'view' => t('View'),
        'update' => t('Update'),
        'delete' => t('Delete'),
      ),
      '#description' => t('These content access permissions will be granted to users referenced in the field.'),
    );
    $form['field']['settings']['nodeaccess_userreference']['author'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Grants for author'),
      '#default_value' => isset($data['author']) ? $data['author'] : array('view', 'update', 'delete'),
      '#options' => array(
        'view' => t('View'),
        'update' => t('Update'),
        'delete' => t('Delete'),
      ),
      '#description' => t('These content access permissions will be granted to the authors of nodes.'),
    );
    $form['field']['settings']['nodeaccess_userreference']['all'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Grants for all users'),
      '#default_value' => isset($data['all']) ? $data['all'] : array(),
      '#options' => array(
        'view' => t('View'),
      ),
      '#description' => t('These content access permissions will be granted to all users.'),
    );
    $form['field']['settings']['nodeaccess_userreference']['unused'] = array(
      '#type' => 'radios',
      '#title' => t('When to set grants'),
      '#default_value' => isset($data['unused']) ? $data['unused'] : 0,
      '#options' => array(
        0 => t('When the user reference field is in use'),
        1 => t('Always'),
      ),
      '#description' => t('Determines whether to set grants when the field is not in use.'),
    );
    if (module_exists('views')) {
      $form['field']['settings']['nodeaccess_userreference']['views'] = array(
        '#type' => 'fieldset',
        '#title' => t('Views - Nodes to affect'),
        '#collapsible' => TRUE,
        '#collapsed' => !isset($data['views']['view']) || $data['views']['view'] == '',
        '#description' => t(
          'Node access user reference applies functionality to all nodes in '
          . 'this content type using this user reference field.  You can, '
          . 'however, choose to affect only certain nodes by creating a views '
          . 'display of nodes that match your criteria, and then selecting it '
          . 'here.'
        ),
      );
      $form['field']['settings']['nodeaccess_userreference']['views']['view'] = array(
        '#type' => 'select',
        '#title' => t('View'),
        '#default_value' => isset($data['views']['view']) ? $data['views']['view'] : '',
        '#options' => nodeaccess_userreference_views_displays('node'),
      );
      $form['field']['settings']['nodeaccess_userreference']['views']['view_args'] = array(
        '#type' => 'textfield',
        '#title' => t('View arguments'),
        '#default_value' => isset($data['views']['view_args']) ? $data['views']['view_args'] : '',
        '#description' => t('Provide a comma separated list of arguments to pass to the view.'),
      );
    }
    else {
      $form['field']['settings']['nodeaccess_userreference']['views']['view'] = array(
        '#type' => 'value',
        '#value' => isset($data['views']['view']) ? $data['views']['view'] : '',
      );
      $form['field']['settings']['nodeaccess_userreference']['views']['view_args'] = array(
        '#type' => 'value',
        '#value' => isset($data['views']['view_args']) ? $data['views']['view_args'] : '',
      );
    }
    $form['field']['settings']['nodeaccess_userreference']['priority'] = array(
      '#type' => 'weight',
      '#title' => t('Priority'),
      '#default_value' => isset($data['priority']) ? $data['priority'] : 0,
      '#description' => t('It is recommended to always leave this set to 0.'),
    );
    $form['#submit'][] = 'nodeaccess_userreference_form_field_ui_field_edit_form_submit';
  }
}

/**
 * Get an array of node views for use in select forms.
 */
function nodeaccess_userreference_views_displays($base_table) {
  $views = array('' => '<' . t('none') . '>');
  $all_views = views_get_all_views();

  foreach ($all_views as $view_name => $view) {
    // Only $base_table views that have fields will work for our purpose.
    if ($view->base_table == $base_table) {
      foreach ((array)$view->display as $display_key => $display) {
        $id = $view_name . ':' . $display_key;
        // Get display title.
       $display_title = nodeaccess_userreference_views_display_title($view_name, $view, $display_key);
        // Append $id to the title for disambiguation in lists.
        $display_title .= ' ['. $id . ']';

        if ($view->type == 'Default') {
          $views[t('Default views')][$id] = $display_title;
        }
        else {
          $views[t('Existing views')][$id] = $display_title;
        }
      }
    }
  }
  return $views;
}

/**
 * Set the display title for a views display.
 */
function nodeaccess_userreference_views_display_title($view_name, $view, $display_name) {
  $view->set_display($display_name);
  $display_title = $view->get_title();
  if (!$display_title) {
    // No title, we have to construct a title.
    $display_title = ucfirst($view_name) ." ". strtolower($view->display[$display_name]->display_title);
  }
  return $display_title;
}

/**
 * Extra submit function for User reference field config.
 */
function nodeaccess_userreference_form_field_ui_field_edit_form_submit($form, &$form_state) {
  $data = &$form_state['values']['field']['settings']['nodeaccess_userreference'];
  $field_name = &$form_state['values']['instance']['field_name'];
  $bundle_name = &$form_state['values']['instance']['bundle'];
  nodeaccess_userreference_field_settings($bundle_name, $field_name, $data);
  $nodes = node_load_multiple(NULL, array('type' => $bundle_name));
  if ($nodes) {
    // Because the field settings have changed we should prompt for a full rebuild.
    node_access_needs_rebuild(TRUE);
  }
}

/**
 * Add node grants in a way that prevents overriding previous iterations.
 *
 * @param &$grants
 *  The grants array where the grant will be added.
 * @param $realm
 *  The realm of this grant.
 * @param $gid
 *  The grant ID.
 * @param $priority
 *  The grant priority.
 * @param $settings
 *  An settings array of boolean equivalent values with keys 'view', 'edit',
 *  and 'delete'.
 */
function nodeaccess_userreference_add_grant(&$grants, $realm, $gid, $priority, $settings) {
  $key = $realm . $gid;
  if (!isset($grants[$key])) {
    // Setup the record.
    $grants[$key] = array(
      'realm' => $realm,
      'gid' => $gid,
      'priority' => $priority,
      'grant_view' => 0,
      'grant_update' => 0,
      'grant_delete' => 0,
    );
  }
  // Add the grants needed, so as not to override previous iterations.
  if (isset($settings['view']) && $settings['view']) {
    $grants[$key]['grant_view'] = 1;
  }
  if (isset($settings['update']) && $settings['update']) {
    $grants[$key]['grant_update'] = 1;
  }
  if (isset($settings['delete']) && $settings['delete']) {
    $grants[$key]['grant_delete'] = 1;
  }
  // Increase the priority if needed.
  if ($priority > $grants[$key]['priority']) {
    $grants[$key]['priority'] = $priority;
  }
}

/**
 * Implements hook_node_access_records().
 */
function nodeaccess_userreference_node_access_records($node) {
  $grants = array();
  $bundle_name = $node->type;
  $fields = field_info_instances('node', $bundle_name);
  foreach ($fields as $field) {
    if (isset($field['display']['default']['module']) && $field['display']['default']['module'] == 'user_reference' && !empty($node->$field['field_name'])) {
      $data = nodeaccess_userreference_field_settings($bundle_name, $field['field_name']);
      if (!empty($data) && !empty($node->$field['field_name'])) {
        // Add referenced user grants.
        foreach ((array) $node->$field['field_name'] as $language) {
          foreach ($language as $userreference) {
            if ($userreference['uid']) {
              nodeaccess_userreference_add_grant(
                $grants,
                'nodeaccess_userreference',
                $userreference['uid'],
                $data['priority'],
                $data['referenced']
              );
            }
          }
        }
        // If there are grants set, also add the author and view-all grants.
        // These will fire for each non-empty nodeaccess_userreference field,
        // but redundant calls will be correctly handled by the helper function:
        // nodeaccess_userreference_add_grant().
        if ($data['unused'] || !empty($grants)) {
           // Add author grants.
           nodeaccess_userreference_add_grant(
             $grants,
             'nodeaccess_userreference_author',
             $node->uid,
             $data['priority'],
             $data['author']
           );
           // Add all grants.
           nodeaccess_userreference_add_grant(
             $grants,
             'nodeaccess_userreference_all',
             1,
             $data['priority'],
             $data['all']
           );
        }
      }
    }
  }
  if (!empty($grants)) {
    return $grants;
  }
  return NULL;
}

/**
 * Set and get nodeaccess userreference field settings.
 *
 * @param $bundle_name
 *   The name of the bundle.
 * @param $field_name
 *   The name of the field.
 * @param $variable
 *   If set will update the value of the settings for this field.
 * @return
 *   The stored or updated value of the settings for this field.
 */
function nodeaccess_userreference_field_settings($bundle_name, $field_name, $variable = NULL) {
  $data = variable_get('nodeaccess_userreference', NULL);
  if (isset($variable)) {
    $data[$bundle_name][$field_name] = $variable;
    variable_set('nodeaccess_userreference', $data);
  }
  if (isset($data[$bundle_name][$field_name])) {
    return $data[$bundle_name][$field_name];
  }
}

/**
 * Implements hook_node_access_explain().
 *
 * This gives the Devel module nice information to display when
 * debugging node grants.
 */
function nodeaccess_userreference_node_access_explain($row) {
  if (
    in_array(
      $row->realm,
      array(
        'nodeaccess_userreference',
        'nodeaccess_userreference_author',
        'nodeaccess_userreference_all'
      )
    )
  ) {

    $ops = array();
    foreach (array('view', 'update', 'delete') as $op) {
      $gop = 'grant_' . $op;
      if (!empty($row->$gop)) {
        $ops[] = $op;
      }
    }

    if (!empty($ops)) {
      $do = implode('/', $ops);
      switch ($row->realm) {
        case 'nodeaccess_userreference':
          $account = user_load($row->gid);
          return t('Referenced user %name may !do this node', array('%name' => $account->name, '!do' => $do));
        case 'nodeaccess_userreference_author':
          $account = user_load($row->gid);
          return t('Node author %name may !do this node', array('%name' => $account->name, '!do' => $do));
        case 'nodeaccess_userreference_all':
          return t('All users may !do this node', array('!do' => $do));
      }
    }

  }
}

/**
 * Implements hook_field_delete_instance().
 */
function nodeaccess_userreference_field_delete_instance($instance) {
  $data = variable_get('nodeaccess_userreference', array());
  if (isset($data[$instance['bundle']][$instance['field_name']])) {
    unset($data[$instance['bundle']][$instance['field_name']]);
    if (empty($data[$instance['bundle']])) {
      unset($data[$instance['bundle']]);
    }
    variable_set('nodeaccess_userreference', $data);
  }
}

/**
 * Implements hook_views_api().
 */
function nodeaccess_userreference_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'nodeaccess_userreference') . '/includes',
  );
}

/**
 * Determine if the node falls into the view configured in the field settings.
 *
 * @param $data
 *  The node access user reference settings for the field.
 * @param $node
 *  The node object.
 * @return
 *  Boolean indicating if the entity is in the view defined by the field config.
 */
function nodeaccess_userreference_node_in_field_view($data, $node) {
  $view_id = $data['views']['view'];
  list($view_name, $view_display) = explode(':', $view_id);

  if ($view = views_get_view($view_name)) {

    // We add a display, and let it derive from the 'default' display.
    $display = $view->add_display('nodeaccess_userreference_views_plugin_display');
    $view->set_display($display);

    // Get the options from the user supplied display.
    if ($view_display != 'default' && isset($view->display[$view_display]->display_options)) {
      $view->display[$display]->display_options = $view->display[$view_display]->display_options;
    }

    // TODO from merlinofchaos on IRC : arguments using summary view can defeat the style setting.
    // We might also need to check if there's an argument, and set *its* style_plugin as well.
    $view->display_handler->set_option('style_plugin', 'nodeaccess_userreference_views_plugin_style');
    $view->display_handler->set_option('row_plugin', 'fields');

    // Additional options to let node_reference_display::query()
    // narrow the results.
    $options = array(
      'table' => 'node',
      'field_id' => 'nid',
      'id' => $node->nid,
    );

    $view->display_handler->set_option('nodeaccess_userreference_options', $options);

    // TODO : for consistency, a fair amount of what's below
    // should be moved to node_reference_display

    // Limit to a single result.
    $view->display_handler->set_option('items_per_page', 1);

    // Get arguments for the view.
    if (!empty($data['views']['view_args'])) {
      $view_args = array_map('trim', explode(',', $data['views']['view']));
    }
    else {
      $view_args = array();
    }

    // Make sure the query is not cached
    $view->is_cacheable = FALSE;

    // Get the results.
    $result = $view->execute_display($display, $view_args);
  }
  else {
    $result = FALSE;
  }

  return $result;
}