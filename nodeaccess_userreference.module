<?php
// $Id$

/**
 * Implementation of hook_perm().
 */
function nodeaccess_userreference_perm() {
  return array('administer node access user reference');
}

/**
 * Implementation of hook_node_grants().
 */
function nodeaccess_userreference_node_grants($account, $op) {
  $grants = array();
  $grants['nodeaccess_userreference'][] = $account->uid;
  if (!empty($grants)) {
    return $grants;
  }
  return null;
}

/**
 * Implementation of hook_form_alter().
 */
function nodeaccess_userreference_form_content_field_edit_form_alter(&$form, $form_state) {
  if ($form['#field']['type'] == "userreference") {
    $field_name = &$form['#field']['field_name'];
    $type_name = &$form['#field']['type_name'];
    $var_name = "nodeaccess_userreference_" . $field_name . '_' . $type_name;
    $view_node = variable_get($var_name, 0);
    $form['widget']['nodeaccess_userreference_view'] = array(
      '#type' => 'checkbox',
      '#title' => t('Grant "view" node access to user'),
      '#default_value' => $view_node,
      '#description' => t('Give the referenced user access to view the node, if they cannot already do so.'),
      '#weight' => 42,
    );

    $update_name = "nodeaccess_userreference_" . $field_name . '_' . $type_name . '_update';
    $update_node = variable_get($update_name, 0);
    $form['widget']['nodeaccess_userreference_update'] = array(
      '#type' => 'checkbox',
      '#title' => t('Grant "edit" node access to user'),
      '#default_value' => $update_node,
      '#description' => t('Give the referenced user access to edit the node, if they cannot already do so.'),
      '#weight' => 43,
    );

    $delete_name = "nodeaccess_userreference_" . $field_name . '_' . $type_name . '_delete';
    $delete_node = variable_get($delete_name, 0);
    $form['widget']['nodeaccess_userreference_delete'] = array(
      '#type' => 'checkbox',
      '#title' => t('Grant "delete" node access to user'),
      '#default_value' => $delete_node,
      '#description' => t('Give the referenced user access to delete the node, if they cannot already do so.'),
      '#weight' => 44,
    );

    $form['#submit'][] = 'nodeaccess_userreference_content_field_edit_form_submit';
  }
}

/**
 * Extra submit function for User Reference field config.
 */
function nodeaccess_userreference_content_field_edit_form_submit($form, &$form_state) {
  $field_name = &$form_state['values']['field_name'];
  $type_name = &$form_state['values']['type_name'];

  $view_node = &$form_state['values']['nodeaccess_userreference_view'];
  $var_name = "nodeaccess_userreference_" . $field_name . '_' . $type_name;
  variable_set($var_name, $view_node);

  $update_node = &$form_state['values']['nodeaccess_userreference_update'];
  $update_name = "nodeaccess_userreference_" . $field_name . '_' . $type_name . '_update';
  variable_set($update_name, $update_node);

  $delete_node = &$form_state['values']['nodeaccess_userreference_delete'];
  $delete_name = "nodeaccess_userreference_" . $field_name . '_' . $type_name . '_delete';
  variable_set($delete_name, $delete_node);
}

/**
 * Implementation of hook_node_access_records().
 */
function nodeaccess_userreference_node_access_records($node) {
  $grants = array();
  $info = content_fields(NULL, $node->type);
  if (is_array($info)) {
    foreach ($info as $field) {
      if ($field['type'] == 'userreference') {
        $var_name = "nodeaccess_userreference_" . $field['field_name'] . '_' . $field['type_name'];
        $update_name = "nodeaccess_userreference_" . $field['field_name'] . '_' . $field['type_name'] . '_update';
        $delete_name = "nodeaccess_userreference_" . $field['field_name'] . '_' . $field['type_name'] . '_delete';
        $grant_view = variable_get($var_name, 0);
        $grant_update = variable_get($update_name, 0);
        $grant_delete = variable_get($delete_name, 0);
        if (($grant_view || $grant_update || $grant_delete) && is_array($node->$field['field_name'])) {
          foreach ($node->$field['field_name'] as $userreference) {
            $grant = array(
              'realm' => 'nodeaccess_userreference',
              'gid' => $userreference['uid'],
              'priority' => 0,
            );
            if ($grant_view) {
              $grant['grant_view'] = 1;
            }
            if ($grant_update) {
              $grant['grant_update'] = 1;
            }
            if ($grant_delete) {
              $grant['grant_delete'] = 1;
            }
            $grants[] = $grant;
          }
        }
      }
    }
  }
  if (!empty($grants)) {
    return $grants;
  }
  return null;
}
